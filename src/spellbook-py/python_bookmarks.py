import base64
import datetime
import hashlib
import json
import os
import re
import requests
from time import sleep

from requests.auth import AuthBase, HTTPBasicAuth
from requests_oauthlib import OAuth2Session


#[1] Initialize the main package to read in env, configs etc.
import importlib  
spellbook = importlib.import_module("spellbook-py")



def twt_get_authorisation_email(client_id, redirect_uri ):
    #[2] Define Twitter credentials from .env

    #[3] Set the scopes what data will be accessed
    # offline.access makes it possible to fetch a new refresh token without prompting a new login session. When the access token has expired, you can fetch a new one with the refresh token. The refresh token is valid for 6 months.

    scopes = ["bookmark.read", "tweet.read", "users.read", "offline.access"]

    #[4] We now need to perform a PKCE / Proof Key for Code Exchange for OAuth 2.0. Read more e.g. here: https://medium.com/identity-beyond-borders/what-the-heck-is-pkce-40662e801a76
    #[4.1] Creating code verifier: cryptographically random string generated by your app
    code_verifier = base64.urlsafe_b64encode(os.urandom(30)).decode("utf-8")
    code_verifier = re.sub("[^a-zA-Z0-9]+", "", code_verifier) #use only standard signs

    #[4.2] Creating code challenge: 
    code_challenge = hashlib.sha256(code_verifier.encode("utf-8")).digest()
    code_challenge = base64.urlsafe_b64encode(code_challenge).decode("utf-8")
    code_challenge = code_challenge.replace("=", "")

    #[5] Start oauth session:
    oauth = OAuth2Session(client_id, 
                            redirect_uri=redirect_uri, 
                            scope=scopes)
    auth_url = "https://twitter.com/i/oauth2/authorize"
    authorization_url, state = oauth.authorization_url( auth_url, 
                                                        code_challenge=code_challenge,
                                                        code_challenge_method="S256")

    print(f'Authorisation URI: {credentials["authorization_url"]}')
    return oauth, code_verifier, authorization_url


def twt_get_access_token(client_id:str, 
                         client_secret:str,
                         code_verifier:str,
                         oauth: OAuth2Session,
                         authorization_response:str = "THE_URL_YOU_GOT_REDIRECTED_TO_AFTER_AUTHORIZATION"):

    token_url = "https://api.twitter.com/2/oauth2/token"
    auth = HTTPBasicAuth(client_id, client_secret)

    token = oauth.fetch_token(
        token_url=token_url,
        authorization_response=authorization_response,
        auth=auth,
        client_id=client_id,
        include_client_id=True,
        code_verifier=code_verifier,
    )
    print(f'Token: {token}')
    return token


if __name__ == "__main__":
    credentials = {
        "client_id": os.environ["TWITTER_CLIENT_ID"],
        "client_secret": os.environ["TWITTER_CLIENT_SECRET"],
        "redirect_uri": os.environ["TWITTER_REDIRECT_URI"]
        }
    credentials, oauth, credentials["authorization_url"] = twt_get_authorisation_email(client_id = credentials["client_id"],
                                                     client_secret = credentials["redirect_uri"])


    print(f"Full credentials {credentials}")


    #twt_get_access_token(credentials, oauth, authorization_response)
